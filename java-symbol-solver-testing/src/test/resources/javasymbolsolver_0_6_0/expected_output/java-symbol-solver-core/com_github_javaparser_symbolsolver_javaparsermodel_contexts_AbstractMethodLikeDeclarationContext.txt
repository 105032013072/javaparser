  Line 34) wrappedNode.getParameters() ==> ERROR
  Line 35) JavaParserFactory.getSymbolDeclarator(parameter, typeSolver) ==> ERROR
  Line 36) AbstractJavaParserContext.solveWith(sb, name) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.solveWith(com.github.javaparser.symbolsolver.resolution.SymbolDeclarator, java.lang.String)
  Line 37) symbolReference.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 43) getParent().solveSymbol(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbol(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 43) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 48) wrappedNode.getTypeParameters() ==> ERROR
  Line 49) tp.getName().getId().equals(name) ==> ERROR
  Line 49) tp.getName().getId() ==> ERROR
  Line 49) tp.getName() ==> ERROR
  Line 50) Optional.of(new TypeVariable(new JavaParserTypeParameter(tp, typeSolver))) ==> java.util.Optional.of(T)
  Line 53) super.solveGenericType(name, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.solveGenericType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 58) wrappedNode.getParameters() ==> ERROR
  Line 59) JavaParserFactory.getSymbolDeclarator(parameter, typeSolver) ==> ERROR
  Line 60) solveWithAsValue(sb, name, typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.solveWithAsValue(com.github.javaparser.symbolsolver.resolution.SymbolDeclarator, java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 61) symbolReference.isPresent() ==> java.util.Optional.isPresent()
  Line 68) getParent().solveSymbolAsValue(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbolAsValue(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 68) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 73) wrappedNode.getTypeParameters() ==> ERROR
  Line 74) wrappedNode.getTypeParameters() ==> ERROR
  Line 75) tp.getName().getId().equals(name) ==> ERROR
  Line 75) tp.getName().getId() ==> ERROR
  Line 75) tp.getName() ==> ERROR
  Line 76) SymbolReference.solved(new JavaParserTypeParameter(tp, typeSolver)) ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.solved(S2)
  Line 82) wrappedNode.getChildNodesByType(com.github.javaparser.ast.body.TypeDeclaration.class) ==> ERROR
  Line 85) localType.getName().getId().equals(name) ==> ERROR
  Line 85) localType.getName().getId() ==> ERROR
  Line 85) localType.getName() ==> ERROR
  Line 86) SymbolReference.solved(JavaParserFacade.get(typeSolver).getTypeDeclaration(localType)) ==> ERROR
  Line 86) JavaParserFacade.get(typeSolver).getTypeDeclaration(localType) ==> ERROR
  Line 86) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 87) name.startsWith(String.format("%s.", localType.getName())) ==> ERROR
  Line 87) String.format("%s.", localType.getName()) ==> ERROR
  Line 87) localType.getName() ==> ERROR
  Line 88) JavaParserFactory.getContext(localType, typeSolver).solveType(name.substring(localType.getName().getId().length() + 1), typeSolver) ==> ERROR
  Line 88) JavaParserFactory.getContext(localType, typeSolver) ==> ERROR
  Line 89) name.substring(localType.getName().getId().length() + 1) ==> ERROR
  Line 89) localType.getName().getId().length() ==> ERROR
  Line 89) localType.getName().getId() ==> ERROR
  Line 89) localType.getName() ==> ERROR
  Line 93) getParent().solveType(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveType(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 93) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
  Line 99) getParent().solveMethod(name, argumentsTypes, false, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 99) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
