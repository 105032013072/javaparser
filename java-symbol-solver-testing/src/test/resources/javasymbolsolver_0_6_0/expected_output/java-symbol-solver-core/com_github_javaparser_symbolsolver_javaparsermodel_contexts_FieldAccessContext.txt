  Line 52) wrappedNode.getField().toString().equals(name) ==> ERROR
  Line 52) wrappedNode.getField().toString() ==> ERROR
  Line 52) wrappedNode.getField() ==> ERROR
  Line 53) wrappedNode.getScope() ==> ERROR
  Line 54) JavaParserFacade.get(typeSolver).getTypeOfThisIn(wrappedNode) ==> ERROR
  Line 54) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 55) new SymbolSolver(typeSolver).solveSymbolInType(typeOfThis.asReferenceType().getTypeDeclaration(), name) ==> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveSymbolInType(com.github.javaparser.symbolsolver.model.declarations.TypeDeclaration, java.lang.String)
  Line 55) typeOfThis.asReferenceType().getTypeDeclaration() ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getTypeDeclaration()
  Line 55) typeOfThis.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 58) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveSymbol(name, typeSolver) ==> ERROR
  Line 58) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver) ==> ERROR
  Line 58) getParentNode(wrappedNode) ==> ERROR
  Line 63) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveType(name, typeSolver) ==> ERROR
  Line 63) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver) ==> ERROR
  Line 63) getParentNode(wrappedNode) ==> ERROR
  Line 68) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver).solveMethod(name, parameterTypes, false, typeSolver) ==> ERROR
  Line 68) JavaParserFactory.getContext(getParentNode(wrappedNode), typeSolver) ==> ERROR
  Line 68) getParentNode(wrappedNode) ==> ERROR
  Line 73) wrappedNode.getScope() ==> ERROR
  Line 74) wrappedNode.getField().toString().equals(name) ==> ERROR
  Line 74) wrappedNode.getField().toString() ==> ERROR
  Line 74) wrappedNode.getField() ==> ERROR
  Line 75) JavaParserFacade.get(typeSolver).getType(scope) ==> ERROR
  Line 75) JavaParserFacade.get(typeSolver) ==> com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade.get(com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 76) typeOfScope.isArray() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isArray()
  Line 76) name.equals(ARRAY_LENGTH_FIELD_NAME) ==> java.lang.String.equals(java.lang.Object)
  Line 77) Optional.of(new Value(PrimitiveType.INT, ARRAY_LENGTH_FIELD_NAME)) ==> java.util.Optional.of(T)
  Line 79) typeOfScope.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 80) typeOfScope.asReferenceType().getFieldType(name) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.getFieldType(java.lang.String)
  Line 80) typeOfScope.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 81) typeUsage.isPresent() ==> java.util.Optional.isPresent()
  Line 82) Optional.of(new Value(typeUsage.get(), name)) ==> java.util.Optional.of(T)
  Line 82) typeUsage.get() ==> java.util.Optional.get()
  Line 84) Optional.empty() ==> java.util.Optional.empty()
  Line 87) Optional.empty() ==> java.util.Optional.empty()
  Line 90) getParent().solveSymbolAsValue(name, typeSolver) ==> com.github.javaparser.symbolsolver.core.resolution.Context.solveSymbolAsValue(java.lang.String, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 90) getParent() ==> com.github.javaparser.symbolsolver.javaparsermodel.contexts.AbstractJavaParserContext.getParent()
