  Line 53) ctClass.isEnum() ==> ERROR
  Line 54) ctClass.toString() ==> ERROR
  Line 63) JavassistFactory.modifiersToAccessLevel(ctClass.getModifiers()) ==> ERROR
  Line 63) ctClass.getModifiers() ==> ERROR
  Line 68) ctClass.getPackageName() ==> ERROR
  Line 73) ctClass.getName().replace('$', '.') ==> ERROR
  Line 73) ctClass.getName() ==> ERROR
  Line 74) getPackageName() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration.getPackageName()
  Line 75) name.substring(getPackageName().length() + 1, name.length()) ==> java.lang.String.substring(int, int)
  Line 75) getPackageName().length() ==> java.lang.String.length()
  Line 75) getPackageName() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration.getPackageName()
  Line 75) name.length() ==> java.lang.String.length()
  Line 82) ctClass.getName().replace('$', '.') ==> ERROR
  Line 82) ctClass.getName() ==> ERROR
  Line 91) ctClass.getSuperclass() ==> ERROR
  Line 94) JavassistFactory.typeUsageFor(superClass, typeSolver) ==> ERROR
  Line 96) superClassTypeUsage.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 97) ancestors.add(superClassTypeUsage.asReferenceType()) ==> java.util.List.add(E)
  Line 97) superClassTypeUsage.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 101) ctClass.getInterfaces() ==> ERROR
  Line 102) JavassistFactory.typeUsageFor(interfaze, typeSolver) ==> ERROR
  Line 104) interfazeTypeUsage.isReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.isReferenceType()
  Line 105) ancestors.add(interfazeTypeUsage.asReferenceType()) ==> java.util.List.add(E)
  Line 105) interfazeTypeUsage.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 109) ctClass.getName() ==> ERROR
  Line 117) javassistTypeDeclarationAdapter.getDeclaredFields().stream().filter(f -> f.getName().equals(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 117) javassistTypeDeclarationAdapter.getDeclaredFields().stream().filter(f -> f.getName().equals(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 117) javassistTypeDeclarationAdapter.getDeclaredFields().stream() ==> java.util.Collection.stream()
  Line 117) javassistTypeDeclarationAdapter.getDeclaredFields() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.getDeclaredFields()
  Line 117) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 117) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 119) field.orElseThrow(() -> new RuntimeException("Field " + name + " does not exist in " + ctClass.getName() + ".")) ==> java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>)
  Line 119) ctClass.getName() ==> ERROR
  Line 124) javassistTypeDeclarationAdapter.getDeclaredFields().stream().anyMatch(f -> f.getName().equals(name)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 124) javassistTypeDeclarationAdapter.getDeclaredFields().stream() ==> java.util.Collection.stream()
  Line 124) javassistTypeDeclarationAdapter.getDeclaredFields() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.getDeclaredFields()
  Line 124) f.getName().equals(name) ==> java.lang.String.equals(java.lang.Object)
  Line 124) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 129) javassistTypeDeclarationAdapter.getDeclaredFields() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.getDeclaredFields()
  Line 134) javassistTypeDeclarationAdapter.getDeclaredMethods() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.getDeclaredMethods()
  Line 154) ctClass.getSimpleName().replace('$', '.').split("\\.") ==> ERROR
  Line 154) ctClass.getSimpleName().replace('$', '.') ==> ERROR
  Line 154) ctClass.getSimpleName() ==> ERROR
  Line 160) javassistTypeDeclarationAdapter.getTypeParameters() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.getTypeParameters()
  Line 165) javassistTypeDeclarationAdapter.containerType() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistTypeDeclarationAdapter.containerType()
  Line 170) Modifier.isStatic(m.getModifiers()) ==> ERROR
  Line 170) m.getModifiers() ==> ERROR
  Line 171) ctClass.getDeclaredMethods() ==> ERROR
  Line 172) method.getMethodInfo().getAttribute(SyntheticAttribute.tag) ==> ERROR
  Line 172) method.getMethodInfo() ==> ERROR
  Line 173) method.getMethodInfo().getAccessFlags() ==> ERROR
  Line 173) method.getMethodInfo() ==> ERROR
  Line 174) method.getName().equals(name) ==> ERROR
  Line 174) method.getName() ==> ERROR
  Line 174) staticOnlyCheck.test(method) ==> ERROR
  Line 175) candidates.add(new JavassistMethodDeclaration(method, typeSolver)) ==> java.util.List.add(E)
  Line 180) ctClass.getSuperclass() ==> ERROR
  Line 182) new JavassistClassDeclaration(superClass, typeSolver).solveMethod(name, argumentsTypes, staticOnly) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration.solveMethod(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, boolean)
  Line 183) ref.isSolved() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.isSolved()
  Line 184) candidates.add(ref.getCorrespondingDeclaration()) ==> java.util.List.add(E)
  Line 184) ref.getCorrespondingDeclaration() ==> com.github.javaparser.symbolsolver.model.resolution.SymbolReference.getCorrespondingDeclaration()
  Line 191) MethodResolutionLogic.findMostApplicable(candidates, name, argumentsTypes, typeSolver) ==> com.github.javaparser.symbolsolver.resolution.MethodResolutionLogic.findMostApplicable(java.util.List<com.github.javaparser.symbolsolver.model.declarations.MethodDeclaration>, java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver)
  Line 195) JavassistUtils.getMethodUsage(ctClass, name, argumentsTypes, typeSolver, invokationContext) ==> ERROR
  Line 205) Arrays.stream(ctClass.getDeclaredClasses()).map(itype -> JavassistFactory.toTypeDeclaration(itype, typeSolver)).collect(Collectors.toSet()) ==> ERROR
  Line 205) Arrays.stream(ctClass.getDeclaredClasses()).map(itype -> JavassistFactory.toTypeDeclaration(itype, typeSolver)) ==> ERROR
  Line 205) Arrays.stream(ctClass.getDeclaredClasses()) ==> ERROR
  Line 205) ctClass.getDeclaredClasses() ==> ERROR
  Line 205) JavassistFactory.toTypeDeclaration(itype, typeSolver) ==> ERROR
  Line 205) Collectors.toSet() ==> java.util.stream.Collectors.toSet()
  Line 218) this.internalTypes().stream().filter(f -> f.getName().endsWith(name)).findFirst() ==> java.util.stream.Stream.findFirst()
  Line 218) this.internalTypes().stream().filter(f -> f.getName().endsWith(name)) ==> java.util.stream.Stream.filter(java.util.function.Predicate<? super T>)
  Line 218) this.internalTypes().stream() ==> java.util.Collection.stream()
  Line 218) this.internalTypes() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration.internalTypes()
  Line 218) f.getName().endsWith(name) ==> java.lang.String.endsWith(java.lang.String)
  Line 218) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
  Line 219) type.orElseThrow(() -> new UnsolvedSymbolException("Internal type not found: " + name)) ==> java.util.Optional.orElseThrow(java.util.function.Supplier<? extends X>)
  Line 229) this.internalTypes().stream().anyMatch(f -> f.getName().endsWith(name)) ==> java.util.stream.Stream.anyMatch(java.util.function.Predicate<? super T>)
  Line 229) this.internalTypes().stream() ==> java.util.Collection.stream()
  Line 229) this.internalTypes() ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistEnumDeclaration.internalTypes()
  Line 229) f.getName().endsWith(name) ==> java.lang.String.endsWith(java.lang.String)
  Line 229) f.getName() ==> com.github.javaparser.symbolsolver.model.declarations.Declaration.getName()
