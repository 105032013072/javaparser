  Line 44) ctClass.getDeclaredMethods() ==> ERROR
  Line 45) method.getName().equals(name) ==> ERROR
  Line 45) method.getName() ==> ERROR
  Line 48) argumentsTypes.size() ==> java.util.List.size()
  Line 48) methodUsage.getNoParams() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.getNoParams()
  Line 53) method.getGenericSignature() ==> ERROR
  Line 54) SignatureAttribute.toMethodSignature(method.getGenericSignature()) ==> ERROR
  Line 54) method.getGenericSignature() ==> ERROR
  Line 55) parseTypeParameters(classSignature.getReturnType().toString(), typeSolver, invokationContext) ==> ERROR
  Line 55) classSignature.getReturnType().toString() ==> ERROR
  Line 55) classSignature.getReturnType() ==> ERROR
  Line 56) methodUsage.returnType() ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.returnType()
  Line 59) newReturnType.asReferenceType().transformTypeParameters(tp -> parametersOfReturnType.remove(0)) ==> com.github.javaparser.symbolsolver.model.typesystem.ReferenceType.transformTypeParameters(com.github.javaparser.symbolsolver.model.typesystem.TypeTransformer)
  Line 59) newReturnType.asReferenceType() ==> com.github.javaparser.symbolsolver.model.typesystem.Type.asReferenceType()
  Line 59) parametersOfReturnType.remove(0) ==> java.util.List.remove(int)
  Line 61) methodUsage.replaceReturnType(newReturnType) ==> com.github.javaparser.symbolsolver.model.methods.MethodUsage.replaceReturnType(com.github.javaparser.symbolsolver.model.typesystem.Type)
  Line 63) Optional.of(methodUsage) ==> java.util.Optional.of(T)
  Line 71) ctClass.getSuperclass() ==> ERROR
  Line 73) new JavassistClassDeclaration(superClass, typeSolver).solveMethodAsUsage(name, argumentsTypes, typeSolver, invokationContext, null) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistClassDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 74) ref.isPresent() ==> java.util.Optional.isPresent()
  Line 83) ctClass.getInterfaces() ==> ERROR
  Line 84) new JavassistInterfaceDeclaration(interfaze, typeSolver).solveMethodAsUsage(name, argumentsTypes, typeSolver, invokationContext, null) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistInterfaceDeclaration.solveMethodAsUsage(java.lang.String, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>, com.github.javaparser.symbolsolver.model.resolution.TypeSolver, com.github.javaparser.symbolsolver.core.resolution.Context, java.util.List<com.github.javaparser.symbolsolver.model.typesystem.Type>)
  Line 85) ref.isPresent() ==> java.util.Optional.isPresent()
  Line 93) Optional.empty() ==> java.util.Optional.empty()
  Line 98) signature.contains("<") ==> java.lang.String.contains(java.lang.CharSequence)
  Line 99) signature.substring(signature.indexOf('<') + 1) ==> java.lang.String.substring(int)
  Line 99) signature.indexOf('<') ==> java.lang.String.indexOf(int)
  Line 100) signature.endsWith(">") ==> java.lang.String.endsWith(java.lang.String)
  Line 103) signature.substring(0, signature.length() - 1) ==> java.lang.String.substring(int, int)
  Line 103) signature.length() ==> java.lang.String.length()
  Line 104) signature.contains(",") ==> java.lang.String.contains(java.lang.CharSequence)
  Line 107) signature.contains("<") ==> java.lang.String.contains(java.lang.CharSequence)
  Line 110) signature.contains(">") ==> java.lang.String.contains(java.lang.CharSequence)
  Line 114) types.add(new SymbolSolver(typeSolver).solveTypeUsage(signature, invokationContext)) ==> java.util.List.add(E)
  Line 114) new SymbolSolver(typeSolver).solveTypeUsage(signature, invokationContext) ==> com.github.javaparser.symbolsolver.resolution.SymbolSolver.solveTypeUsage(java.lang.String, com.github.javaparser.symbolsolver.core.resolution.Context)
  Line 117) Collections.emptyList() ==> java.util.Collections.emptyList()
  Line 124) classType.getTypeArguments() ==> ERROR
  Line 124) Collections.emptyList() ==> java.util.Collections.emptyList()
  Line 124) Arrays.stream(classType.getTypeArguments()).map(ta -> typeArgumentToType(ta, typeSolver, typeParametrizable)).collect(Collectors.toList()) ==> ERROR
  Line 124) Arrays.stream(classType.getTypeArguments()).map(ta -> typeArgumentToType(ta, typeSolver, typeParametrizable)) ==> ERROR
  Line 124) Arrays.stream(classType.getTypeArguments()) ==> ERROR
  Line 124) classType.getTypeArguments() ==> ERROR
  Line 124) typeArgumentToType(ta, typeSolver, typeParametrizable) ==> ERROR
  Line 124) Collectors.toList() ==> java.util.stream.Collectors.toList()
  Line 126) classType.getDeclaringClass() ==> ERROR
  Line 127) classType.getDeclaringClass().getName() ==> ERROR
  Line 127) classType.getDeclaringClass() ==> ERROR
  Line 127) classType.getName() ==> ERROR
  Line 128) classType.getName() ==> ERROR
  Line 129) typeSolver.solveType(internalNameToCanonicalName(typeName)) ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
  Line 130) internalNameToCanonicalName(typeName) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils.internalNameToCanonicalName(java.lang.String)
  Line 134) typeParametrizable.findTypeParameter(typeVariableSignature.getName()) ==> ERROR
  Line 134) typeVariableSignature.getName() ==> ERROR
  Line 135) typeParameterDeclarationOpt.isPresent() ==> java.util.Optional.isPresent()
  Line 138) typeParameterDeclarationOpt.get() ==> java.util.Optional.get()
  Line 141) signatureType.getClass().getCanonicalName() ==> ERROR
  Line 141) signatureType.getClass() ==> ERROR
  Line 146) typeName.replaceAll("\\$", ".") ==> java.lang.String.replaceAll(java.lang.String, java.lang.String)
  Line 150) typeArgument.jvmTypeName() ==> ERROR
  Line 151) getGenericParameterByName(typeName, typeParametrizable) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils.getGenericParameterByName(java.lang.String, com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable)
  Line 152) type.orElseGet(() -> new ReferenceTypeImpl(typeSolver.solveType(internalNameToCanonicalName(typeName)), typeSolver)) ==> java.util.Optional.orElseGet(java.util.function.Supplier<? extends T>)
  Line 153) typeSolver.solveType(internalNameToCanonicalName(typeName)) ==> com.github.javaparser.symbolsolver.model.resolution.TypeSolver.solveType(java.lang.String)
  Line 153) internalNameToCanonicalName(typeName) ==> com.github.javaparser.symbolsolver.javassistmodel.JavassistUtils.internalNameToCanonicalName(java.lang.String)
  Line 158) typeParametrizable.findTypeParameter(typeName) ==> com.github.javaparser.symbolsolver.model.declarations.TypeParametrizable.findTypeParameter(java.lang.String)
  Line 159) tp.map(TypeVariable::new) ==> java.util.Optional.map(java.util.function.Function<? super T, ? extends U>)
  Line 163) typeArgument.isWildcard() ==> ERROR
  Line 164) typeArgument.getType() ==> ERROR
  Line 166) typeArgument.getKind() ==> ERROR
  Line 167) Wildcard.extendsBound(objectTypeArgumentToType(typeArgument.getType(), typeSolver, typeParametrizable)) ==> ERROR
  Line 167) objectTypeArgumentToType(typeArgument.getType(), typeSolver, typeParametrizable) ==> ERROR
  Line 167) typeArgument.getType() ==> ERROR
  Line 168) typeArgument.getKind() ==> ERROR
  Line 169) Wildcard.superBound(objectTypeArgumentToType(typeArgument.getType(), typeSolver, typeParametrizable)) ==> ERROR
  Line 169) objectTypeArgumentToType(typeArgument.getType(), typeSolver, typeParametrizable) ==> ERROR
  Line 169) typeArgument.getType() ==> ERROR
  Line 174) objectTypeArgumentToType(typeArgument.getType(), typeSolver, typeParametrizable) ==> ERROR
  Line 174) typeArgument.getType() ==> ERROR
