description = ''
dependencies {
    compile project(':java-symbol-solver-model')
    compile project(':java-symbol-solver-logic')
    compile project(':java-symbol-solver-core')
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.easymock', name: 'easymock', version: '3.5.1'
}

apply plugin: 'java'

idea {
    module {
        excludeDirs += file('src/test/resources/javaparser_expected_output')
        excludeDirs += file('src/test/resources/javaparser_src')
        excludeDirs += file('src/test/resources/javaparser_methodcalls_expected_output')
        excludeDirs += file('src/test/resources/javaparser_new_src')
    }
}

jacocoTestReport {
    sourceSets project(":java-symbol-solver-model").sourceSets.main
    sourceSets project(":java-symbol-solver-logic").sourceSets.main
    sourceSets project(":java-symbol-solver-core").sourceSets.main
}

def javassistSymbolsResources = "$projectDir/src/test/resources/javassist_symbols"
def jars = [
    [name: "excluded_jar", taskNameSuffix: "ExcludedJar", classPath: [], compileTaskDependencies: [], buildTaskDependencies: []],
    [name: "included_jar", taskNameSuffix: "IncludedJar", classPath: [], compileTaskDependencies: [], buildTaskDependencies: []],
    [
        name: "main_jar",
        taskNameSuffix: "MainJar",
        classPath: ["$javassistSymbolsResources/excluded_jar/excluded_jar.jar", "$javassistSymbolsResources/included_jar/included_jar.jar"],
        compileTaskDependencies: ["compileTestJarExcludedJar", "compileTestJarIncludedJar", "buildTestJarExcludedJar", "buildTestJarIncludedJar"],
        buildTaskDependencies: []
    ]
]

jars.each { jarToBuild ->
    def fullDir = "$javassistSymbolsResources/${jarToBuild.name}";
    task "compileTestJar${jarToBuild.taskNameSuffix}" (type: JavaCompile, dependsOn: jarToBuild.compileTaskDependencies) {
        destinationDir = new File("$fullDir/result")
        source = "$fullDir/src"
        classpath = project.files(jarToBuild.classPath.each {cp -> "${->cp}"}, {
            builtBy jarToBuild.compileTaskDependencies
        })
    }
    task "buildTestJar${jarToBuild.taskNameSuffix}"  (type: Jar, dependsOn: ["compileTestJar${jarToBuild.taskNameSuffix}", jarToBuild.buildTaskDependencies]) {
        archiveName = jarToBuild.name + ".jar"
        destinationDir = new File(fullDir)
        with {
            from("$fullDir/result") {
                include "**/*.class"
            }
        }
    }
}

assemble.dependsOn buildTestJarMainJar