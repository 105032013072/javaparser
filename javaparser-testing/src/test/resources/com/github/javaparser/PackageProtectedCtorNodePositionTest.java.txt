// -- FILE ------------------------------------------------------------------
// name       : AsnBinaryValueBase.java
// project    : Panter: AAIP
// created    : Leon Poyyayil - 2007-01-16
// language   : java
// environment: JDK 1.5.0
// copyright  : (c) 1990-2016 by Leon Poyyayil (private), Switzerland
// license    : this is free software licensed under the GPL. see COPYING
// --------------------------------------------------------------------------
package some.sample.pkg.impl;

import some.sample.pkg.api.AsnBinaryValue;
import some.sample.pkg.api.AsnType;


// -- CLASS -----------------------------------------------------------------
/** Test source code to demonstrate issue in parsing constructors without
explicit modifiers (e.g. package protected access).

In javaparser 3.0.0-RC.1, this will lead to the ConstructorDeclaration node
having a begin position of zero, which is obviously wrong.

Based on above mentioned version, the fix is done in

  javaparser-core/src/main/javacc/java_1_8.jj

on line 1844, where an additional evaluation of 'begin' is inserted after matching
the constructor SimpleName() as follows:

old:

  name = SimpleName() { begin = begin.orIfInvalid(typeParameters.range.begin); } parameters = FormalParameters() [ "throws" throwType = ReferenceTypeWithAnnotations() { throws_ = add(throws_, throwType); }

new:

  name = SimpleName() { begin = begin.orIfInvalid(typeParameters.range.begin); begin = begin.orIfInvalid(tokenBegin()); } parameters = FormalParameters() [ "throws" throwType = ReferenceTypeWithAnnotations() { throws_ = add(throws_, throwType); }

This will fall back to the beginning of the constructor token in case no modifiers
and no type parameters are present as in this sample code.

@author   Leon Poyyayil
*///-------------------------------------------------------------------------
public abstract class AsnBinaryValueBase extends AsnSimpleValueBase implements AsnBinaryValue {


// -- METHOD ----------------------------------------------------------------
AsnBinaryValueBase(
  final AsnType pType
)
{
  super( pType );
} // AsnBinaryValueBase


// -- METHOD ----------------------------------------------------------------
AsnBinaryValueBase(
  final AsnType pType,
  final byte[]  pBytes
)
{
  this( pType );
  setBytes( pBytes );
} // AsnBinaryValueBase


// -- METHOD ----------------------------------------------------------------
public final byte[] getBytes()
{
  return mBytes;
} // getBytes


// -- METHOD ----------------------------------------------------------------
public final void setBytes(
  final byte[] pContent
)
{
  mBytes = pContent;
} // setBytes


// ----- members -----
private final byte[] mBytes;


} // class AsnBinaryValueBase
// --------------------------------------------------------------------------


// -- EOF -------------------------------------------------------------------
