/*
 * Copyright (C) 2008 Júlio Vilmar Gesser.
 *
 * This file is part of Java 1.5 parser and Abstract Syntax Tree.
 *
 * Java 1.5 parser and Abstract Syntax Tree is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Java 1.5 parser and Abstract Syntax Tree is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Java 1.5 parser and Abstract Syntax Tree.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * Created on 05/10/2006
 */
package japa.parser;

import japa.parser.ast.CompilationUnit;
import japa.parser.ast.ImportDeclaration;
import japa.parser.ast.body.BodyDeclaration;
import japa.parser.ast.body.FieldDeclaration;
import japa.parser.ast.body.MethodDeclaration;
import japa.parser.ast.expr.AnnotationExpr;
import japa.parser.ast.expr.Expression;
import japa.parser.ast.stmt.BlockStmt;
import japa.parser.ast.stmt.Statement;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;

// FIXME this file does not seem to be generated by javacc. Is the doc wrong, or the javacc config?
/**
 * <p>
 * This class was generated automatically by javacc, do not edit.
 * </p>
 * <p>
 * Parse Java 1.5 source code and creates Abstract Syntax Tree classes.
 * </p>
 * <p>
 * <b>Note:</b> To use this parser asynchronously, disable de parser cache by
 * calling the method {@link setCacheParser} with <code>false</code> as
 * argument.
 * </p>
 * 
 * @author Júlio Vilmar Gesser
 */
public final class JavaParser {

	private static ASTParser parser;

	// FIXME is this caching worth the effort?
	private static boolean cacheParser = true;

	private JavaParser() {
		// hide the constructor
	}

	/**
	 * Changes the way that the parser acts when starts to parse. If the parser
	 * cache is enabled, only one insance of this object will be used in every
	 * call to parse methods. If this parser is intend to be used asynchonously,
	 * the cache must be disabled setting this flag to <code>false</code>. By
	 * default, the cache is enabled.
	 * 
	 * @param value
	 *            <code>false</code> to disable the parser instance cache.
	 */
	public static void setCacheParser(final boolean value) {
		cacheParser = value;
		if (!value) {
			parser = null;
		}
	}

	/**
	 * Parses the Java code contained in the {@link InputStream} and returns a
	 * {@link CompilationUnit} that represents it.
	 * 
	 * @param in
	 *            {@link InputStream} containing Java source code
	 * @param encoding
	 *            encoding of the source code
	 * @return CompilationUnit representing the Java source code
	 * @throws ParseException
	 *             if the source code has parser errors
	 */
	public static CompilationUnit parse(final InputStream in,
			final String encoding) throws ParseException {
		if (cacheParser) {
			if (parser == null) {
				parser = new ASTParser(in, encoding);
			} else {
				parser.reset(in, encoding);
			}
			return parser.CompilationUnit();
		}
		return new ASTParser(in, encoding).CompilationUnit();
	}

	/**
	 * Parses the Java code contained in the {@link InputStream} and returns a
	 * {@link CompilationUnit} that represents it.
	 * 
	 * @param in
	 *            {@link InputStream} containing Java source code
	 * @return CompilationUnit representing the Java source code
	 * @throws ParseException
	 *             if the source code has parser errors
	 */
	public static CompilationUnit parse(final InputStream in)
			throws ParseException {
		return parse(in, null);
	}

	/**
	 * Parses the Java code contained in a {@link File} and returns a
	 * {@link CompilationUnit} that represents it.
	 * 
	 * @param file
	 *            {@link File} containing Java source code
	 * @param encoding
	 *            encoding of the source code
	 * @return CompilationUnit representing the Java source code
	 * @throws ParseException
	 *             if the source code has parser errors
	 * @throws IOException
	 */
	public static CompilationUnit parse(final File file, final String encoding)
			throws ParseException, IOException {
		final FileInputStream in = new FileInputStream(file);
		try {
			return parse(in, encoding);
		} finally {
			in.close();
		}
	}

	/**
	 * Parses the Java code contained in a {@link File} and returns a
	 * {@link CompilationUnit} that represents it.
	 * 
	 * @param file
	 *            {@link File} containing Java source code
	 * @return CompilationUnit representing the Java source code
	 * @throws ParseException
	 *             if the source code has parser errors
	 * @throws IOException
	 */
	public static CompilationUnit parse(final File file) throws ParseException,
			IOException {
		return parse(file, null);
	}

	public static CompilationUnit parse(final Reader reader)
			throws ParseException {
		return new ASTParser(reader).CompilationUnit();
	}

	public static BlockStmt parseBlock(String blockStatement)
			throws ParseException {
		StringReader sr = new StringReader(blockStatement);
		BlockStmt result = new ASTParser(sr).Block();
		sr.close();
		return result;
	}

	public static Statement parseStatement(String statement)
			throws ParseException {
		StringReader sr = new StringReader(statement);
		Statement stmt = new ASTParser(sr).Statement();
		sr.close();
		return stmt;
	}

	public static ImportDeclaration parseImport(String importDeclaration)
			throws ParseException {
		StringReader sr = new StringReader(importDeclaration);
		ImportDeclaration id = new ASTParser(sr).ImportDeclaration();
		sr.close();
		return id;
	}

	public static Expression parseExpression(String conditional)
			throws ParseException {
		StringReader sr = new StringReader(conditional);
		Expression e = new ASTParser(sr).Expression();
		sr.close();
		return e;
	}

	public static AnnotationExpr parseAnnotation(String annotation)
			throws ParseException {
		StringReader sr = new StringReader(annotation);
		AnnotationExpr ae = new ASTParser(sr).Annotation();
		sr.close();
		return ae;
	}

	public static BodyDeclaration parseBodyDeclaration(String body)
			throws ParseException {
		StringReader sr = new StringReader(body);
		BodyDeclaration bd = new ASTParser(sr).AnnotationBodyDeclaration();
		sr.close();
		return bd;
	}
}
